<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Custom Cursor</title>
  <style>
    body {
      background-color: #0d0714;
      color: #a78bfa;
      font-family: Arial, sans-serif;
      text-align: center;
      padding-top: 100px;
      cursor: none; /* hide default cursor */
    }
    h1 {
      font-size: 2.5rem;
      font-weight: 900;
      color: #3f3356;
      margin-bottom: 40px;
    }
    button, .cursor-target {
      border: 2px dashed #a78bfa;
      border-radius: 12px;
      padding: 16px 32px;
      margin: 12px;
      font-size: 1.5em;
      font-weight: bold;
      background: transparent;
      color: #a78bfa;
      cursor: none; /* ensure system cursor hidden */
    }

    /* Cursor styles */
    .target-cursor-wrapper {
      position: fixed;
      top: 0;
      left: 0;
      width: 0;
      height: 0;
      pointer-events: none;
      z-index: 9999;
      mix-blend-mode: difference;
      transform: translate(-50%, -50%);
    }

    .target-cursor-dot {
      position: absolute;
      left: 50%;
      top: 50%;
      width: 6px;
      height: 6px;
      background: #fff;
      border-radius: 50%;
      transform: translate(-50%, -50%);
      will-change: transform;
    }

    .target-cursor-corner {
      position: absolute;
      left: 50%;
      top: 50%;
      width: 12px;
      height: 12px;
      border: 3px solid #fff;
      will-change: transform;
    }

    .corner-tl { transform: translate(-150%, -150%); border-right: none; border-bottom: none; }
    .corner-tr { transform: translate(50%, -150%);  border-left: none; border-bottom: none; }
    .corner-br { transform: translate(50%, 50%);    border-left: none; border-top: none; }
    .corner-bl { transform: translate(-150%, 50%);  border-right: none; border-top: none; }
  </style>
</head>
<body>
  <h1>Hover Below.</h1>

  <button class="cursor-target" ondragover="">THIS</button>
  <button class="cursor-target" onclick="alert('You clicked FEELS!')">FEELS</button>
  <button class="cursor-target" onclick="alert('You clicked QUITE!')">QUITE</button>
  <div class="cursor-target" onclick="alert('You clicked SNAPPY!')">SNAPPY!</div>
  <button class="cursor-target" onclick="window.open('https://github.com', '_blank')">RIGHT?</button>

  <!-- Custom Cursor -->
  <div id="cursor" class="target-cursor-wrapper">
    <div id="dot" class="target-cursor-dot"></div>
    <div class="target-cursor-corner corner-tl"></div>
    <div class="target-cursor-corner corner-tr"></div>
    <div class="target-cursor-corner corner-br"></div>
    <div class="target-cursor-corner corner-bl"></div>
  </div>

  <!-- GSAP -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
  <script>
    const cursor = document.getElementById("cursor");
    const dot = document.getElementById("dot");
    const corners = cursor.querySelectorAll(".target-cursor-corner");
    const targets = document.querySelectorAll(".cursor-target");

    let spinTl = gsap.timeline({ repeat: -1 })
      .to(cursor, { rotation: "+=360", duration: 2, ease: "none" });

    // move cursor with mouse
    window.addEventListener("mousemove", e => {
      gsap.to(cursor, { x: e.clientX, y: e.clientY, duration: 0.15, ease: "power3.out" });
    });

    // click animation
    window.addEventListener("mousedown", () => {
      gsap.to(dot, { scale: 0.7, duration: 0.3 });
      gsap.to(cursor, { scale: 0.9, duration: 0.2 });
    });
    window.addEventListener("mouseup", () => {
      gsap.to(dot, { scale: 1, duration: 0.3 });
      gsap.to(cursor, { scale: 1, duration: 0.2 });
    });

    // hover effect
    targets.forEach(target => {
      target.addEventListener("mouseenter", e => {
        spinTl.pause();
        gsap.set(cursor, { rotation: 0 });

        const updateCorners = () => {
          const rect = target.getBoundingClientRect();
          const cursorRect = cursor.getBoundingClientRect();
          const cx = cursorRect.left + cursorRect.width/2;
          const cy = cursorRect.top + cursorRect.height/2;

          const offsets = [
            { x: rect.left - cx - 3, y: rect.top - cy - 3 },
            { x: rect.right - cx - 9, y: rect.top - cy - 3 },
            { x: rect.right - cx - 9, y: rect.bottom - cy - 9 },
            { x: rect.left - cx - 3, y: rect.bottom - cy - 9 }
          ];

          corners.forEach((corner, i) => {
            gsap.to(corner, { x: offsets[i].x, y: offsets[i].y, duration: 0.2, ease: "power2.out" });
          });
        };

        updateCorners();

        target.addEventListener("mousemove", ev => updateCorners(ev.clientX, ev.clientY));
      });

      target.addEventListener("mouseleave", () => {
        const positions = [
          { x: -18, y: -18 },
          { x: 6, y: -18 },
          { x: 6, y: 6 },
          { x: -18, y: 6 }
        ];
        corners.forEach((corner, i) => {
          gsap.to(corner, { x: positions[i].x, y: positions[i].y, duration: 0.3, ease: "power3.out" });
        });

        spinTl.restart();
      });
    });
  </script>
</body>
</html>
